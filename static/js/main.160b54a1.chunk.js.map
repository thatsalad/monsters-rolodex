{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAIaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCQbC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UChBtBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,uBACIC,KAAM,SACNF,YAAaA,EACbG,SAAUF,EACVZ,UAAW,aCkCJe,E,kDApCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACDC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAG9C,WAAU,IAAD,SAI6BE,KAAKR,MAA/BR,EAJH,EAIGA,SAAUS,EAJb,EAIaA,YAEZQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAEtG,OACI,sBAAK3B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CACIW,YAAa,kBACbC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAE5D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA/BdO,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.160b54a1.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","/*\n------------------------------\nPackage:\nFile: card-list.component.jsx\nAuthor: cdev@apple.com\nDate: 14/05/2021\nTime: 14:43\n------------------------------\n*/\n\nimport React from 'react';\n\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component';\n\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {\n            props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster}/>\n            ))}\n    </div>\n);","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n\n    <input\n        type={'search'}\n        placeholder={placeholder}\n        onChange={handleChange}\n        className={'search'}\n    />\n\n)","import './App.css';\nimport {Component} from \"react\";\n\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from './components/search-box/search-box.component';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then( response => response.json())\n        .then(users => this.setState({monsters: users}))\n  }\n\n  render() {\n\n      // this is called 'destructuring'\n      // equiv to const monsters = this.state.monsters etc\n      const { monsters, searchField } = this.state;\n      // this returns an array from monsters opf entries whose name contains the searchField value\n      const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n        <div className=\"App\">\n            <h1>Monsters Rolodex</h1>\n            <SearchBox\n                placeholder={'search monsters'}\n                handleChange={e => this.setState({searchField: e.target.value})}\n            />\n            <CardList monsters={filteredMonsters}/>\n        </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}